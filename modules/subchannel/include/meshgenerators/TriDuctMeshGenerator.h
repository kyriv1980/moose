/********************************************************************/
/*                   DO NOT MODIFY THIS HEADER                      */
/*          Subchannel: Thermal Hydraulics Reactor Analysis         */
/*                                                                  */
/*              (c) 2022 Battelle Energy Alliance, LLC              */
/*                      ALL RIGHTS RESERVED                         */
/*                                                                  */
/*             Prepared by Battelle Energy Alliance, LLC            */
/*               Under Contract No. DE-AC07-05ID14517               */
/*               With the U. S. Department of Energy                */
/*                                                                  */
/*               See COPYRIGHT for full restrictions                */
/********************************************************************/

#pragma once

#include "MeshGenerator.h"

/**
 * Mesh generator for hexagonal duct
 */
class TriDuctMeshGenerator : public MeshGenerator
{
public:
  TriDuctMeshGenerator(const InputParameters & parameters);

  std::unique_ptr<MeshBase> generate() override;

protected:
  /**
   * Returns an index into the vector of point/node positions used/generated by
   * ductPoints.  This is used for mapping a xsec point index and a z-axis layer
   * index to its corresponding point vector index.
   */
  size_t ductPointIndex(unsigned int points_per_layer, unsigned int layer, unsigned int point);

  /**
   * calculate the x-y coordinates of the corner points for the duct cross section.
   */
  void ductCorners(std::vector<Point> & corners, Real flat_to_flat, Point center);

  /**
   * calcultes the points around the duct cross section boundary (perpendicular to z axis) using
   * assembly parameters.  xsec will contain the points that
   */
  void ductXsec(std::vector<Point> & xsec,
                const std::vector<Point> & corners,
                unsigned int nrings,
                Real pitch,
                Real flat_to_flat);

  /**
   * Calculates all the point/node positions that will be used to form elements
   * making the duct.
   */
  void ductPoints(std::vector<Point> & points,
                  const std::vector<Point> & xsec,
                  const std::vector<Real> & z_layers);

  /**
   * Calculates the groups of points/nodes that comprise each element in the
   * duct mesh.  The groups are identified by indices into the points vector
   * returned by ductPoints.  n_layers is the number of z-axis layers the duct
   * has (i.e. the number of z x-secs lining up with nodes.  And
   * points_per_layer is the number of nodes/points in each of those x-secs.
   */
  void ductElems(std::vector<std::vector<size_t>> & elem_point_indices,
                 unsigned int n_layers,
                 unsigned int points_per_layer);

  /**
   * buildDuct generates and adds mesh node and element objects to the given
   * mesh corresponding to the given points (from ductPoints) and
   * elem_point_indices that identify node point groups forming elements (from ductElems)
   */
  void buildDuct(std::unique_ptr<MeshBase> & mesh,
                 std::vector<Node *> & duct_nodes,
                 const std::vector<Point> & points,
                 const std::vector<std::vector<size_t>> & elem_point_indices,
                 SubdomainID block);

  /// Mesh that comes from another generator
  std::unique_ptr<MeshBase> & _input;
  /// number of axial cells
  unsigned int _n_cells;
  /// axial location of nodes
  std::vector<Real> _z_grid;
  /// unheated length of the fuel rod at the entry of the assembly
  Real _unheated_length_entry;
  /// heated length of the fuel rod
  Real _heated_length;
  /// unheated length of the fuel rod at the exit of the assembly
  Real _unheated_length_exit;
  /// block index
  unsigned int _block_id;
  /// Distance between the neighbor fuel rods, pitch
  Real _pitch;
  /// number of rings of fuel rods
  unsigned int _n_rings;
  /// the distance between flat surfaces of the duct facing each other
  Real _flat_to_flat;

public:
  static InputParameters validParams();
};
